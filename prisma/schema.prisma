// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    // provider = "sqlite"
    // url      = "file:./db.sqlite"
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
    referentialIntegrity = "prisma"
}

model Lobby {
    id Int  @id @default(autoincrement())
    createdAt DateTime @default(now())

    lobbyCode String
    lobbyType String // Taylor / Flag
    status String // InLobby / InGame / Ended
    players Player[]
    rounds Round[]
    roundLength Int
    totalRounds Int
    maxRounds Int

    @@index([lobbyCode])
    @@unique([lobbyCode])
}

model Player {
  id Int  @id @default(autoincrement())
  createdAt DateTime @default(now())

  name String
  token String
  answers Answer[]

  lobby   Lobby @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  lobbyId Int

  @@index([token])
  @@unique([lobbyId, token])
}

model Round {
  id Int  @id @default(autoincrement())
  createdAt DateTime @default(now())

  question String
  answer Int
  choices Choice[]
  answers Answer[]

  lobby   Lobby @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  lobbyId Int
}

model Choice {
  id Int  @id @default(autoincrement())
  choice String

  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId Int
}

model Answer {
  id Int  @id @default(autoincrement())
  createdAt DateTime @default(now())

  answer Int
  score Int

  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId Int

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  @@unique([roundId, playerId])
}
